= title "Dashboard"

= library_analytics

%script{:src => "https://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.min.js"}
%script{:src => "https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.2/moment.min.js"}
%script{:src => "/assets/keppler_ga_dashboard/view-selector2.js?body=1"}
%script{:src => "/assets/keppler_ga_dashboard/date-range-selector.self.js?body=1"}
%script{:src => "/assets/keppler_ga_dashboard/active-users.self.js?body=1"}

.dashboard
	.row
		.col.s12
			.card
				.dashboard-head
					#view-name.hide-on-small-only
					#active-users-container
					#view-selector-container.hide-on-small-only
		.col.s12
			.card
				#chart-1-container{ style: "height: 200px;"}
				#legend-1-container.charts-legend
		.col.s12
			.card
				#chart-2-container{ style: "height: 200px;"}
				#legend-2-container.charts-legend
		.col.s12.m6.l6
			.card
				#chart-4-container{ style: "height: 300px;"}
				#legend-4-container.charts-legend
		.col.s12.m6.l6
			.card
				#chart-3-container{ style: "height: 300px;"}
				#legend-3-container.charts-legend

:javascript
	gapi.analytics.ready(function() {
	
		/*Authorize the user immediately if the user has already granted access.*/
		gapi.analytics.auth.authorize({
			serverAuth: {
		    access_token: "#{@access_token}" /*Se agrega el access token desde la api de ruby para analitycs*/
		  }
		});
	
	
		/**
		 * Create a new ActiveUsers instance to be rendered inside of an
		 * element with the id "active-users-container" and poll for changes every
		 * five seconds.
		 */
		var activeUsers = new gapi.analytics.ext.ActiveUsers({
			container: 'active-users-container',
			pollingInterval: 5
		});
	
	
		/*Add CSS animation to visually show the when users come and go.*/
		activeUsers.once('success', function() {
			var element = this.container.firstChild;
			var timeout;
	
			this.on('change', function(data) {
				var element = this.container.firstChild;
				var animationClass = data.delta > 0 ? 'is-increasing' : 'is-decreasing';
				element.className += (' ' + animationClass);
	
				clearTimeout(timeout);
				timeout = setTimeout(function() {
					element.className = element.className.replace(/ is-(increasing|decreasing)/g, '');
				}, 3000);
			});
		});
	
	
		/*
			Create a new ViewSelector2 instance to be rendered inside of an
			element with the id "view-selector-container".
		*/
		var viewSelector = new gapi.analytics.ext.ViewSelector2({
			container: 'view-selector-container',
			accountId: "#{Rails.application.secrets.ga_auth.fetch(:account_id)}"
		}).execute();
	
	
		/*
			Update the activeUsers component, the Chartjs charts, and the dashboard
			title whenever the user changes the view.
		*/
		viewSelector.on('viewChange', function(data) {
			var title = document.getElementById('view-name');
			title.innerHTML = data.property.name + ' (' + data.view.name + ')';

			// Start tracking active users for this view.
			activeUsers.set(data).execute();
	
			// Aqui se deben agregar los ids de las vistas de la pagina.
			renderWeekOverWeekChart(data.ids);
			renderYearOverYearChart(data.ids);
			renderTopBrowsersChart(data.ids);
			renderTopCountriesChart(data.ids);
		});
	
	
		/**
		 * Draw the a chart.js line chart with data from the specified view that
		 * overlays session data for the current week over session data for the
		 * previous week.
		 */
		function renderWeekOverWeekChart(ids) {
	
			// Adjust `now` to experiment with different days, for testing only...
			var now = moment(); // .subtract(3, 'day');
	
			var thisWeek = query({
				'ids': ids,
				'dimensions': 'ga:date,ga:nthDay',
				'metrics': 'ga:sessions',
				'start-date': moment(now).subtract(1, 'day').day(0).format('YYYY-MM-DD'),
				'end-date': moment(now).format('YYYY-MM-DD')
			});
	
			var lastWeek = query({
				'ids': ids,
				'dimensions': 'ga:date,ga:nthDay',
				'metrics': 'ga:sessions',
				'start-date': moment(now).subtract(1, 'day').day(0).subtract(1, 'week').format('YYYY-MM-DD'),
				'end-date': moment(now).subtract(1, 'day').day(6).subtract(1, 'week').format('YYYY-MM-DD')
			});
	
			Promise.all([thisWeek, lastWeek]).then(function(results) {
	
				var data1 = results[0].rows.map(function(row) { return +row[2]; });
				var data2 = results[1].rows.map(function(row) { return +row[2]; });
				var labels = results[1].rows.map(function(row) { return +row[0]; });
	
				labels = ["Dom", "Lun", "Mar", "Mie", "Jue", "Vie", "Sab"]
	
				var data = {
					labels : labels,
					datasets : [
						{
							label: 'Semana pasada',
							fillColor : '#e3e3e3',
							strokeColor : '#e3e3e3',
							pointColor : '#e3e3e3',
							pointStrokeColor : '#e3e3e3',
							pointHighlightFill: "#fff",
							pointHighlightStroke: '#e3e3e3',
							data : data2
						},
						{
							label: 'Esta semana',
							fillColor : '#009688',
							strokeColor : '#009688',
							pointColor : '#009688',
							pointStrokeColor : '#009688',
							pointHighlightFill: "#fff",
							pointHighlightStroke: "#009688",
							data : data1
						}
					]
				};
	
				new Chart(makeCanvas('chart-1-container')).Line(data, {
					scaleShowHorizontalLines: false,
					scaleShowVerticalLines: false
				});
				generateLegend('legend-1-container', data.datasets);
			});
		}
	
	
		/**
		 * Draw the a chart.js bar chart with data from the specified view that
		 * overlays session data for the current year over session data for the
		 * previous year, grouped by month.
		 */
		function renderYearOverYearChart(ids) {
	
			// Adjust `now` to experiment with different days, for testing only...
			var now = moment(); // .subtract(3, 'day');
	
			var thisYear = query({
				'ids': ids,
				'dimensions': 'ga:month,ga:nthMonth',
				'metrics': 'ga:users',
				'start-date': moment(now).date(1).month(0).format('YYYY-MM-DD'),
				'end-date': moment(now).format('YYYY-MM-DD')
			});
	
			var lastYear = query({
				'ids': ids,
				'dimensions': 'ga:month,ga:nthMonth',
				'metrics': 'ga:users',
				'start-date': moment(now).subtract(1, 'year').date(1).month(0).format('YYYY-MM-DD'),
				'end-date': moment(now).date(1).month(0).subtract(1, 'day').format('YYYY-MM-DD')
			});
	
			Promise.all([thisYear, lastYear]).then(function(results) {
				var data1 = results[0].rows.map(function(row) { return +row[2]; });
				var data2 = results[1].rows.map(function(row) { return +row[2]; });
				var labels = ['Ene','Feb','Mar','Abr','May','Jun','Jul','Ago','Sep','Oct','Nov','Dic'];
	
				// Ensure the data arrays are at least as long as the labels array.
				// Chart.js bar charts don't (yet) accept sparse datasets.
				for (var i = 0, len = labels.length; i < len; i++) {
					if (data1[i] === undefined) data1[i] = null;
					if (data2[i] === undefined) data2[i] = null;
				}
	
				var data = {
					labels : labels,
					datasets : [
						{
							label: 'Año pasado',
							fillColor : '#e3e3e3',
							strokeColor : '#e3e3e3',
							data : data2
						},
						{
							label: 'Este año',
							fillColor : '#009688',
							strokeColor : '#009688',
							data : data1
						}
					]
				};
	
				new Chart(makeCanvas('chart-2-container')).Bar(data, {
					scaleShowHorizontalLines: false,
					scaleShowVerticalLines: false
				});
				generateLegend('legend-2-container', data.datasets);
			})
			.catch(function(err) {
				console.error(err.stack);
			});
		}
	
	
		/**
		 * Draw the a chart.js doughnut chart with data from the specified view that
		 * show the top 5 browsers over the past seven days.
		 */
		function renderTopBrowsersChart(ids) {
	
			query({
				'ids': ids,
				'dimensions': 'ga:browser',
				'metrics': 'ga:pageviews',
				'sort': '-ga:pageviews',
				'max-results': 5
			})
			.then(function(response) {
	
				var data = [];
				var colors = ['#009688','#e3e3e3','#2196f3','#f1dd30','#f44336'];
	
				response.rows.forEach(function(row, i) {
					data.push({ value: +row[1], color: colors[i], label: row[0] });
				});
	
				new Chart(makeCanvas('chart-3-container')).Doughnut(data);
				generateLegend('legend-3-container', data);
			});
		}
	
	
		/**
		 * Draw the a chart.js doughnut chart with data from the specified view that
		 * compares sessions from mobile, desktop, and tablet over the past seven
		 * days.
		 */
		function renderTopCountriesChart(ids) {
			query({
				'ids': ids,
				'dimensions': 'ga:country',
				'metrics': 'ga:sessions',
				'sort': '-ga:sessions',
				'max-results': 5
			})
			.then(function(response) {
	
				var data = [];
				var colors = ['#009688','#e3e3e3','#2196f3','#f1dd30','#f44336'];
	
				response.rows.forEach(function(row, i) {
					data.push({
						label: row[0],
						value: +row[1],
						color: colors[i]
					});
				});
	
				new Chart(makeCanvas('chart-4-container')).Pie(data);
				generateLegend('legend-4-container', data);
			});
		}
	
	
		/**
		 * Extend the Embed APIs `gapi.analytics.report.Data` component to
		 * return a promise the is fulfilled with the value returned by the API.
		 * @param {Object} params The request parameters.
		 * @return {Promise} A promise.
		 */
		function query(params) {
			return new Promise(function(resolve, reject) {
				var data = new gapi.analytics.report.Data({query: params});
				data.once('success', function(response) { resolve(response); })
				.once('error', function(response) { reject(response); })
				.execute();
			});
		}
	
	
		/**
		 * Create a new canvas inside the specified element. Set it to be the width
		 * and height of its container.
		 * @param {string} id The id attribute of the element to host the canvas.
		 * @return {RenderingContext} The 2D canvas context.
		 */
		function makeCanvas(id) {
			var container = document.getElementById(id);
			var canvas = document.createElement('canvas');
			var ctx = canvas.getContext('2d');
	
			container.innerHTML = '';
			canvas.width = container.offsetWidth;
			canvas.height = container.offsetHeight;
			container.appendChild(canvas);
	
			return ctx;
		}
	
	
		/**
		 * Create a visual legend inside the specified element based off of a
		 * Chart.js dataset.
		 * @param {string} id The id attribute of the element to host the legend.
		 * @param {Array.} items A list of labels and colors for the legend.
		 */
		function generateLegend(id, items) {
	    var legend = document.getElementById(id);
	    legend.innerHTML = items.map(function(item) {
	      var color = item.color || item.fillColor;
	      var label = item.label;
	      return '<li><i style="background:' + color + '"></i>' + label + '</li>';
	    }).join('');
	  }
	
	
		// Set some global Chart.js defaults.
		Chart.defaults.global.animationSteps = 60;
		Chart.defaults.global.animationEasing = 'easeInOutQuart';
		Chart.defaults.global.responsive = true;
		Chart.defaults.global.maintainAspectRatio = false;
	});